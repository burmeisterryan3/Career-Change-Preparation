#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","C#"]},{"name":"sql","languageName":"SQL","aliases":[]},{"name":"vscode","aliases":["frontend"],"languageName":null}]}}

#!markdown

# <ins>**Chapter 07**</ins>: *Packaging and Distributing .NET Types*

##### Taken from *C11-DotNet7 - Modern Cross-Platform Development Fundamentals* by Mark J. Price

https://github.com/markjprice

https://github.com/markjprice/cs11dotnet7

#!markdown

## **The Road to .NET 7**

.NET Core 2.0 and later support for a minimum of .NET Standard 2.0 is importnat because it provides many of the APIs that were missing from the first version of .NET Core.

.NET Standard 2.1 added APIs (~3,000) that needed runtime changes that would break backward compatability, so .NET Framework 4.8 only implements .NET Standard 2.0. .NET Core 3.0, Xamarin, Mono, and Unity implement .NET Standard 2.1.

.NET 5 removed the need for .NET Standard if all your projects could use .NET 5. The same applies to .NET 6 and .NET 7. Since you might need to create class libraries for legacy .NET Framework projects or legacy Xamarin mobile apps, there is still a need to create .NET Standard 2.0 and 2.1 class libraries.

Now that .NET 6 and .NET 7 have full support for mobile and desktop apps using .NET MAUI, the need for .NET Standard has been further reduced.

In summary,

* **.NET Core 1.x**: Much smaller API compared to .NET Framework 4.6.1 (current version in March 2016).
* **.NET Core 2.x**: Reached API parity with .NET Framework 4.7.1 for modern APIs because both implement .NET Standard 2.0.
* **.NET Core 3.x**: Larger API compared to .NET Framework for modern APIs because .NET Framework 4.8 does not implement .NET Standard 2.1.
* **.NET 5**: Even larger API compared to .NET Framework 4.8 for modern APIs, wich improved performance.
* **.NET 6**: Continued improvements to performance and expanded APIs. Optional support for mobile apps in .NET MAUI added in May 2022.
* **.NET 7**: Final unification with the support for mobile apps in .NET MAUI.

### .NET Core 1.0

Released in June 2016 and focused on implementing an API suitable for building modern cross-platform apps, including web and cloud applications and services for Linux using ASP.NET Core.

### .NET Core 1.1

Released in November 2016 and focused on fixing bugs, increasing the number of Linux distributions supported, supporting .NET Standard 1.6, and improving performance, especially with ASP.NET Core for web apps and services.

### .NET Core 2.0

Released in August 2017 and focused on implementing .NET Standard 2.0, the ability to reference .NET Framework libraries, and more performance improvements.

### .NET Core 2.1

Released in May 2018 and focused on an extendable tooling system, adding new types like `Span<T>`, new APIs for cryptography and compression, a Windows Compatability Pack with an additional 20,000 APIs to help port old Windows applications, Entity Framework Core value conversions, LINQ `GroupBy` conversions, data seeding, query types, and more performance improvements.

### .NET Core 2.2

Releaed in December 2018 and focued on diagnostic improvements for the runtime, optional tiered compilation, and adding new features to ASP.NET Core and Entity Framework Core like spatial data support using types from the **NetTopologySuite (NTS)** library, quety tags, and collections of ownded entities.

### .NET Core 3.0

Released in September 2019 and focused on adding support for building Windows desktop applications using Window Forms (2001), **Windows Presentation Foundation** (**WPF**; 2006), and Entity Framework 6.3, side-by-side and app-local deployments, a fast JSON reader, serial port access and other pinout access for **Internet of Things (IoT)** solutions, and tiered compilation by default.

### .NET Core 3.1

Released in December 2019 and focused on bug fixes and refines so that it could be a **Long Term Support (LTS)** release.

### [.NET 5.0](https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_5/)

Released in November 2020 and focused on unifying the various .NET platforms except mobile, refining the platform, and improving performance.

### [.NET 6.0](https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_6/)

Released in November 2021 and focused on adding more features to EF Core for data management, new types for working with dates and times, and improving performance.

### [.NET 7.0](https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/)

Released in November 2022 and focused on unifying with the mobile platform, adding more features like string syntax and coloring and IntelliSense, support for creating and extracting tar archives, and improving performance of inserts and updates with EF Core.

#!markdown

## **Understanding .NET Components**

.NET is made up of several pieces.

* **Language compilers**: These turn your source code written with languages uch as C#, F#, and Visual Basic into **intermediate language (IL)** code stored in assemblies. With C# 6.0 and later, Microsoft switched to an open-source rewritten compiler known as Roslyn that is also used by Visual Basic.
* **Common Language Runtime (CoreCLR)**: Ths runtime loads assemblies, compiles the IL code stored in them into native code instructions for your computer's CPU, and executes the code within an environment that manages resources such as threads and memory.
* **Base Class Libraries (BCL or CoreFX)**: These are prebuilt assemblies of types packaged and distributed using NuGet for performing common tasks when building applications.

### Assemblies, NuGet Packages, and Namespaces

An **assembly** is where a type is stored in a filesystem. Assemblies are a mechanism for deploying code. For example, the `System.Data.dll` assembly contains types for managing data. To use types in other assemblies, they must be referenced. Assemblies can be static (pre-created) or dynamic (generated at runtime). Assemblies can be compiled into a single file as a DLL (class library) or an EXE (console app)

Assemblies are distributed as **NuGet packages**, which are files downloadable from public online feeds and can contain multiple assemblies and other resources. You will also hear about **project SDKS**, **workloads**, and **platforms**, which are combinations of NuGet packages.

#### What is a namespace?

A namespace is the address of a type. Naespaces are a mechanism to uniquely identify a type by requiring a full address rather than a short name.

#### Dependent Assemblies

If an assbmly is compiled as a class library and provides types for other assemblies to use, then it has the file extension `.dll` (dynamic link library), and it cannot be executed standalone.

Likewise, if an assembly is compiled as an application, then it has the file extension `.exe` (**executable**) and can be executed standalone. Before .NET Core 3.0, console apps were compiled to `.dll` files and had be executed by the `dotnet run` command or a host executable.

Any assembly can reference one or more class library assemblies as dependencies, but you cannot have circular references. So assembly *B* cannot reference assembly *A* if assembly *A* already references assembly *B*. The compiler will warn you if you attempt to add a dependency reference that would cause a circular reference, usually a sign of poor code design. If you are sure that you need a circular reference, then use an interface to solve it.

### Microsoft .NET Project SDKs

By default, console applications have a dependency reference on the Microsoft .NET project SDK. This platform contains thousands of types in NuGet packages that almost all applications would need, such as the `System.Int32` and `System.String` types.

When using .NET, you reference the dependency assemblies, NuGet packages, and platforms that your application needs in a project file.

#### Namespaces and Types in Assemblies

Many common .NET types are in the `System.Runtime.dll` assembly. There is not always a one-to-one mapping between assemblies and namespaces. A single assembly can contain many namespaces and a namespace can be defined in many assemblies.

| **Assembly** | **Example Namespaces** | **Example Types** |
| ------------ | ---------------------- | ----------------- |
| `System.Runtime.dll` | `System`, `System.Collections`, `System.Collections.Generic` | `Int32`, `String`, `IEnumerable<T>` |
| `System.Console.dll` | `System` | `Console` |
| `System.Threading.dll` | `System.Threading` | `Interlocked`, `Monitor`, `Mutex` |
| `System.Xml.XDocument.dll` | `System.Xml.Linq` | `XDocument`, `XElement`, `XNode` |

### NuGet Packages

.NET is split into a set of packages, distrubted using a Miscrosoft-supported package maangement technology named NuGet. Each of these packages represents a single assembly of the same name. For examples, the `System.Collections` package contains the `System.Collections.dll` assembly.

| **Package** | **Important Types** |
| ----------- | ------------------- |
| `System.Runtime` | `Object`, `String`, `Int32`, `Array` |
| `System.Collections` | `List<T>`, `Dictionary<TKey, TValue>` |
| `System.Net.Http` | `HttpClient`, `HttpeResponseMessage` |
| `System.IO.FileSystem` | `File`, `Directory` |
| `System.Reflection` | `Assembly`, `TypeInfo`, `MethodInfo` |

### Understanding Frameworks

There is a two-way relationship between frameworks and APIs. Packages define the APIs, while the frameworks group packages. A framework without any packages would not define any APIs.

.NET packages each suport a set of frameworks. For example, the `System.IO.FileSystem` package version 4.3.0 supports the following frameworks:

* .NET Standard, version 1.3 or later
* .NET Framework, version 4.6 or later
* Six Mono and Xamarin platforms (e.g. Xamarin.iOS 1.0)

### Importing a Namespace to Use a Type

A type will not be recognized by the comiler until we have told it the namespace of the type. Although the project has a reference to the assembly that containst he type, we also need to eitehr prefix the type name with its namespace

    System.Xml.Linq.XDocument doc = new();

or import the namespace

    using System.Xml.Linq;

    XDocument doc = new();

Once a namespace is imported at the top of a code file, then all the types within the namespace are available for use in that code file by just typing their name without the type name needing to be fully qualified by prefixing it with its namespace.

### Relating C# Keywords to .NET Types

"What is the difference between `string` with a lowercase s and `String` with an uppercase S?"

C# type keywords like `string` or `int` are aliases for a .NET type in a class library assembly.

When you use the `string` keyword, the compiler recognizes it as a `System.String` type. When you use the `int` type, the compiler recognizes it as a `System.Int32` type.

#### Good Practice

When you have a choice, use the C# keyword instead of the actual type because the keywords do not need the namespace to e imported.

#### Mapping C# Aliases to .NET Types

| **Keyword** | **.NET Type** | **Keyword** | **.NET Type** |
| ----------- | ------------- | ----------- | ------------- |
| `string` | `System.String` | `char` | `System.Char` |
| `sbyte` | `System.SByte` | `byte` | `System.Byte` |
| `short` | `System.Int16` | `ushort` | `System.UInt16` |
| `int` | `System.Int32` | `uint` | `System.UInt32` |
| `long` | `System.Int64` | `ulong` | `System.UInt64` |
| `nint` | `System.IntPtr` | `nuint` | `System.UIntPtr` |
| `float` | `System.Single` | `double` | `System.Double` |
| `decimal` | `System.Decimal` | `bool` | `System.Boolean` |
| `object` | `System.Object` | `dynamic` | `System.Dynamic.DynamicObject` |

#### Understanding Native-sized Integers

C# 9 introduced the `nint` and `nuint` keyword aliases for **native-sized integers**, meaning that the storage size for the integer value is platform specific. They store a 32-bit integer in a 32-bit process and `sizeof()` returns 4 bytes; they store a 64-bit integer in a 64-bit process and `sizeof()` returns 8 bytes. The aliases represent pointers to the integer value in memory, which is why their .NET names are `IntPtr` and `UIntPtr`. The actual storage type will be either `System.Int32` or `System.Int64` depending on the process.

#!csharp

Console.WriteLine($"int.MaxValue = {int.MaxValue:N0}");
Console.WriteLine($"nint.MaxValue = {nint.MaxValue:N0}");

#!markdown

## **Sharing Code with Legacy Platforms Using .NET Standard**

Before .NET Standard, there were **Portable Class Libraries (PCLs)**. With PCLs, you could create a library of code and explicitly specify which platforms you want the library to support, such as Xamarin, Silverlight, and Windows 8. Your library could then use the intersection of APIs that are suppoted by the specified platforms.

Microsoft realized that this is unsustainable, so they created .NET Standard - a single API that all future .NET platforms would support. .NET Standard 2.0 was an attempt to unify all important recent .NET platforms. Although .NET Standard 2.1 exists, .NET Standard will refer to .NET Stabdard 2.0 below due to limited support for 2.1.

.NET Standard is like HTML5 in that they are both standards that a platform *should* support. .NET Core, .NET Framework, and Xamarin all implement .NET Standard. If you want to create a library of types that will work across variants of legacy .NET, you can do so most easily with .NET Standard.

Your choice of which .NET Standard version to target comes down to a balance between maximizing platform support and available functionality. A lower version supports more platforms but has a smaller set of APIs. Generally, you should choose the lowest version that supports all the APIs you need.

#### Good Practice

Sine many of hte API additions in .NET Standard 2.1 required runtime changes, and .NET Framework is Microsoft's legacy platform that needs to remain as unchanging as possible, .NET Framework 4.8 remained on .NET Standard 2.0 rather than implementing .NET Standard 2.1. If you need to support .NET Framework customers, then you should create class libraries on .NET Standard 2.0 even though it is not the latest and does not support all the reent language and BCL new features.

### Understanding Defaults for Class Libraries with Different SDKs

When using the `dotnet` SDK tool to create a class library, it might be useful to know which target framework will be used by default.

| **SDK** | **Default Target Framework for New Class Libraries** |
| ------- | ---------------------------------------------------- |
| .NET Core 3.1 | `netstandard2.0` |
| .NET 6 | `net6.0` |
| .NET 7 | `net7.0` |

You can manually set the target framework to a value that supports the projects that need to reference that library.

| **Class Library Target Framework** | **Can be Used by Projects that Target** |
| ---------------------------------- | --------------------------------------- |
| `netstandard2.0` | .NET Framework 4.6.1 or later, .NET Core 2.0 or later, .NET 5.0 or later, Mono 5.4 or later, Xamarin.Android 8.0 or later, Xamarin.iOS 10.14 or later |
| `netstandard2.1` | .NET Core 3.0 or later, .NET 5.0 or later, Mono 6.4 or later, Xamarin.Android 10.0 or later, Xamarin.iOS 12.16 or later |
| `net6.0` | .NET 6.0 or later |
| `net7.0` | .NET 7.0 or later |

#### Good Practice

Always check the target framework of a class library and then manually change it to something more appropriate if necessary. Make a conscious decision about what it should be rather than accepting the default.

If you need to create types that use new features (e.g. .NET 7.0) as well as types that only use .NET Standard 2.0 features, then you can create two separate class libraries: one targeting .NET Standard 2.0 and one targeting .NET 7.0.

### Controllling the .NET SDK

By default, executing `dotnet` commands uses the most recent installed .NET SDK. There may be times when you want to controll which SDK is used.

You can control the .NET SDK used by default by using a `global.json` file. The `dotnet` command searches the current folder and ancestor folders for a `global.json` file.

#!markdown

## **Publishing Your Code for Deployment**

Most developers write code for other develpers to use int heir own projects, or for users to run as an app. To do so, you must publish your code as packaged class libraries or executable applications.

There are three ways to publish and deploy a .NET application.

* **Framework-dependent deployment (FDD)**
* **Framework-dependent executable (FDE)**
* **Self-contained**

If you choose to deploy your application and its package dependencies, but not .NET itself, then you rely on .NET already being on the target computer. This works well for web applications deployed to a server because .NET and lots of other web applications are likely already on the server.

**FDD** means you deploy a DLL that must be executed by the `dotnet` command-line tool. **FDE** means you deploy an EXE that can be run directly from the command line. Both require the appropriate version of the .NET runtime to be already installed on the system.

Sometimes, you want to be able to give someone a USB stick containing your application and know that it can execute on their computer. You want to perform a self-contained deployment. While the size of the deployment files will be larger, you'll know that it will work.

### Creating a Console App to Publish

In the `.csproj` file, you can add runtime identifers to target operating systems inside the `<PropertyGroup>` element.

    <PropertyGroup>
        ...
        <RuntimeIdentifiers>
            win10-x64;osx-x64;osx.11.0-arm64;linux-x64;linux-arm64
        </RuntimeIdentifiers>
    </PropertyGroup>

* The `win10-x64` RID value means Windows 10 or Windows Server 2016 64-bit. You could also use the `win10-arm64` RID value to deploy to a Microsoft Surface Pro X, Surface Pro 9 (SQ 3), or Windows Dev Kit 2023.
* The `osx-x64` RID value means macOS Sierra 10.12 or later. You can also specify version-specific RID values like `osx.10.15-x64` (Catalina), `osx.13.0-x64` (Ventura on Intel), or `osx.13.0-arm64` (Ventura on Apple Silicon).
* The `linux-x64` RID value means most desktop distributions of Linux, like Ubuntu, CentOS, Debian, or Fedora. Use `linux-arm` for Raspbian or Raspberry Pi OS 32-bit. Use `linux-arm64` for a Raspberry Pi running Ubuntu 64-bit.

NOTE: `<RuntimeIdentifier>` is another valid way to speficy *a* runtime identifier. Use `<RuntimeIdentifiers>` if you need to specify multiple runtimes.

### Understanding `dotnet` Commands

When you install the .NET SDK, it includes a **command-line interface (CLI)** named `dotnet`.

#### Creating New Projects

The .NET CLI has commands that work on the current folder to create a new project using templates.

Enter `dotnet new list` command to list your currently installed templates.

#### Getting Information About .NET and its Environment

It is useful to see what .NET SDKs and runtimes are currently installed, alongside information about the operating system.

    dotnet --info

#### Managing Projects

See pp 329-330 for additional `dotnet` commands for managing projects. A few are listed her as examples.

* `dotnet help`: Shows the command line help.
* `dotnet new`: Create a new .NET project or file
* `dotnet restore`: Downloads dependencies for the project.
* `dotnet build`: Builds, aka compiles, a .NET project.
* `dotnet clean`: Removes the temproary outputs from a build.
* `dotnet test`: Builds and then runs unit tests for the project.
* `dotnet run`: Builds and then runst he project.
* ...

### Publishing a Self-contained App

To publish a self-contained release version of the console application, you can run the below command while updating the OS for the OSs desired.

    dotnet publish -c Release win10-x64 --self-contained
    dotnet publish -c Release osx-x64 --self-contained
    dotnet publish -c Release osx.11.0-arm64 --self-contained
    dotnet publish -c Release linux-x64 --self-contained
    dotnet publish -c Release linux-arm64 --self-contained

Navigate to the projects `bin\Release\net7.0` folder, and note the output folders for the five operating systems. If you copy any of those `publish` folders to the appropriate OS, the console app will run; this is because it is a self-contained deployable .NET application.

#### Good Practice

You could automate these commands by using a scripting language like PowerShell and execute the script file on any operating system using the cross-platform PowerShell Core. Just create a file with the extension `.ps1` with the five commands in it. The execute the file.

### Publishing a Single-file App

To publish a "single" file, you can specify flags when publishing. With .NET 5, single-file apps were primarily focused on Linux because there are limitations in both Windows and macOS that mean true single-file publishing is not technically possible. With .NET 6 or later, you can now create proper single-file apps on Windows.

If you can assume that .NET is already installed on the computer on which you want to run your app, then you can uset he extra flags when you publish your app for release to say that it does not need to be self-contained and that you want to publish it as a single file (if possible).

    dotnet publish -c Release -r win10-x64 --no-self-contained

This will generate two files: `DotNetEverywhere.exe` and `DotNetEverywhere.pdb`. The `.exe` is the executable. The `.pdb` files is a **program debug database** file that stores debugging information.

There is no `.exe` file extension for published applications on macOS, so if you use the `osx-x64` in the command above, the filename will not have an extension.

If you prefer the `.pdb` to be embedded in the `.exe` file, for example, to ensure it is deployed with its assembly, then add a `<DebugType>` element to the `<PropertyGroup>` element in your `.csproj` file and set it to `embedded`.

    <PropertyGroup>
        <OutputType>Exe</OutputType>
        <TargetFramework>net7.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
    
        <RuntimeIdentifiers>
            win10-x64;osx-x64;osx.11.0-arm64;linux-x64;linux-arm64
        </RuntimeIdentifiers>

        <DebugType>embedded</DebugType>
    </PropertyGroup>

If you cannot assume that .NET is already installed on a computer, then although Linux only generates the two files, expect additional files for Windows.

### Reducing the Size of Apps Using App Trimming

One of the problems with deploying a .NET app as a self-contained app is that the .NET libraries take up a lot of space. One of the biggest needs is to reduce the size of Blazor WebAssembly components because all the .NET libraries need to be downloaded to the browser.

Luckily, you can reduce this size by not packaging unused assemblies with your deployments. Introduced with .NET Core 3.0, the app trimming system can identify the assemblies needed by your code and remove those that are not needed.

With .NET 5, the trimming went further by removing individual types, and even members like methods from within an assembly if they are not used. For example, with a Hello World console app, the `System.Console.dll` assembly is trimmed from 61.5 KB to 31.5 KB. For .NET 5, this is an experimental feature, so it is disabled by default.

With .NET 6, Micorosoft added annotations to their libraries to indicate how they can be safely trimmed so the trimming of types and members was made the default. This is known as **link trim mode**.

The catch is how well the trimming identifies unused assemblies, types, and members. If your code is dynamic, perhaps using reflection, then it might not work correctly, so Microsoft also allows manual control.

#### Enabling Assembly-level Trimming

There are two ways to enable assembly-level trimming.

The first way is to add an element in the project file.

    <PulishTrimmed>true</PublishTrimmed>

The second way is to add a flag when publishing.

    dotnet publish ... -p:PublishTrimmed=True

#### Enabling Type-level and Member-level Trimming

There are two ways to enable type-level and member-level trimming.

The first way is to add two elements to the project file.

    <PublishTrimmed>true</PublishTrimmed>
    <TrimMode>Link</TrimMode>

The second way is to add two flags when publishing.

    dotnet publish ... -p:PublishTrimmed=True -p:TrimMode=Link

For .NET 6, link trim mode is the default, so you only need to specify the switch if you want to set an alternative trim mode, like `copyused`, which means assembly-level trimming.

#!markdown

## **Decompiling .NET Assemblies**

One of the best ways to learn to code for .NET is to see how professionals do it.

#### Good Practice

You could decompile someone else's assemblies for non-learning purposes like copying their code for use in your own production library or application, but remember that you are viewing their intellectual property, so please respect that.

### Decompiling Using teh ILSpy Extension for Visual Studio 2022

To view the assembly, right click on a project file and select **Open output in ILSpy**. Then navigate to the method within the assembly you wish to view.

You can also select to view the IL code if desired. However, the much more useful edit windows contain the equivalent C# source code as written by Microsoft experts... Again, you can learn a lot of good practices by from seeing how professionals implement types.

### Viewing [Source Links](https://learn.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink) with Visual Studio

Instead of decompiling, Visual Studio 2022 has a feature that allows you to view the original source code using source links.

You can right-click on a method and select **Go To Implementation**. You can learn more from viewing source links than decompiling because they show best practices for sitautions like how to divide up a class into partial classes for easier management. When we used ILSpy compiler, all it could do was show all the hundres of methods of the `Enumerable` class.

#!markdown

## **Packaging Your Libraries for NuGet Distribution**

### Referencing a NuGet Package

In Visual Studio, you can select `Project` and `Manage NuGet Packages...`.

### Fixing Dependencies

To consistently restore packages and write reliable code, it's important that you **fix dependencies**. Fixing dependencies means you are using the same family of packages released for a specific version of .NET, for example, SQLite for .NET 7.0.

    <Project Sdk="Microsoft.NET.Sdk">
        <PropertyGroup>
            <OutputType>Exe</OutputType>
            <TargetFramework>net7.0</TargetFramework>
            <Nullable>enable</Nullable>
            <ImplicitUsings>enable</ImplicitUsings>
        </PropertyGroup>

        <ItemGroup>
            <PackageReference
            Include="Microsoft.EntityFrameworkCore.Sqlite"
            Version="7.0.0" />
        </ItemGroup>
    </Project>

To fix dependencies, every packages should have a single version with no additional qualifiers. Additional qualifiers include betas (`beta1`), release candidates (`rc4`), and wildcards (`*`).

Wildcards allow future versions to be automatically referenced and used because they always represent the most recent release. But wildcards are therefore dangerous because they could result in the use of future incompatible packages that break your code.

    <PackageReference
    Include="Microsoft.EntityFrameworkCore.Sqlite"
    Version="7.0.0-preview.*" />

The following dependencies are example of NuGet package references taht are *not* fixed and therefore should be avoided unless you know the implications.

    <PackageReference Include="System.Net.Http" Version="4.1.0-*" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.2-beta1" />

#### Good Practice

Microsoft guarantess taht if you fixed your dependencies to what ships with a specific version of .NET, for example, 6.0.0, those packages will all work together. Almost always fix your dependencies.

### Packaging a Library for NuGet

See `SharedLibrary.csproj` or in the Chapter07 folder or p343 in the book for details pertinent to the below.

* `PackageId` must be globally unique, so you must use a different value if you want to publis a NuGet package to the https://www.nuget.org/ public feed for others to reference and download.
* `PackageLicenseExpression` must be a value from https://spdx.org/licenses/, or you could specify a custom license.
* All other elements are self-explanatory.

    <Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageId>Packt.CSdotnet.SharedLibrary</PackageId>
		<PackageVersion>7.0.0.0</PackageVersion>
		<Title>C# 11 and .NET 7 Shared Library</Title>
		<Authors>Mark J Price</Authors>
		<PackageLicenseExpression>
			MS-PL
		</PackageLicenseExpression>
		<PackageProjectUrl>
			https://github.com/markjprice/cs11dotnet7
		</PackageProjectUrl>
		<PackageIcon>packt-csdotnet-sharedlibrary.png</PackageIcon>
		<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
		<PackageReleaseNotes>
			Example shared library packaged for NuGet.
		</PackageReleaseNotes>
		<Description>
			Three extension methods to validate a string value.
		</Description>
		<Copyright>
			Copyright © 2016-2022 Packt Publishing Limited
		</Copyright>
		<PackageTags>
			string extensions packt csharp dotnet
		</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<None Include="packt-csdotnet-sharedlibrary.png">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

</Project>

#!markdown

## **Porting from .NET Framework to Modern .NET**

If you are an existing .NET Framework developer, then you may have existing applications that you think you should port to modern .NET. But you should carefully consider if porting is the right choice for yourcode, because sometimes, the best choice is not to port.

### Could you port?

Modern .NET has great support for the folowing types of applications on Windows, maOS, Linux, so they are good candidates for porting.

* **ASP.NET Core** websites, including Razor Pages and MVC
* **ASP.NET Core** web services (**REST/HTTP**), including **Web APIs**, **Minimal APIs**, and **OData**
* **ASP.NET Core-hosted** services, including **gRPC**, **GraphQL**, and **SignalR**
* **Console App** command-line interfaces

### Should you port?

Even if you *could* port, *should* you? What benefits do you gain? Some common benefits include the following:

* **Deployment to Linux, Docker, or Kubernetes for websites and web services:** These OSes are lightweight and cost-effective as website and web service platforms, especially when compared to the more costly Windows Server.
* **Removal of dependency on IIS and System.Web.dll:** Even if you continue to deploy to Windows Server, ASP.NET Core can be hosted on lightweight, hier-performance Kestrel (or other) web servers.
* **Command-line tools:** Tools that developers and administrators use to automate their task are often built as console applications. The ability to run a single tool cross-platform is very useful.

### Difference Between .NET Framework and Modern .NET

There are three key differences.

| **Modern .NET** | **.NET Framework** |
| --------------- | ------------------ |
| Distributed as NuGet packages, so each application can be deployed with its own app-local copy of the version of .NET that it needs. | Distributed as a system-wide, shared set of assemblies (literally, in the **Global Assembly Cache (GAC)**). |
| Split into small, layered components, so a minimal deployment can be performed. | Single, monolithic deployment. |
| Removes older technologies, such as ASP.NET Web Forms, and non-cross-platform features, such as AppDomains, .NET Remoting, and binary serialization. | As well as some similar technologies to those in modern .NET like ASP.NET Core MVC, it also retains some older technologies, such as ASP.NET Web Forms. |

### .NET Portability Analyzer

Microsoft has a useful tool that you can run against your existing applications to generate a report for porting. You can watch a demonstration of the tool at the following link: https://learn.microsoft.com/en-us/shows/seth-juarez/brief-look-net-portability-analyzer.

### .NET Upgrade Assistant

Microsoft's latest tool for upgrading legacy projects to modern .NET is the **.NET Upgrade Assistant**.

Currently, it supports the following .NET Framework project types and more will be added.

* ASP.NET MVC
* Windows Forms
* WPF
* Console Application
* Class Library

It is installed as a global `dotnet` tool.

    dotnet tool install -g upgrade-assistant

To learn more, see https://learn.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview.

#!markdown

## **Using non-.NET Standard Libraries

Most existing NuGet packages can be used with modern .NET, even if they are not compiled for .NET Standard or a modern version like .NET 7. If you find a package that does not officially support .NET Standard, as shown on its `nuget.org` web page, you do not have to give up. You should try it and see if it works.

## **Working with Preview Features**
It is important to note that this topic is about *preview features*. This is different from a preview version of .NET or a preview version of Visual Studio 2022. Microsoft releases preview versions of Visual Studio and .NET while developing them to get feedback from developers and then do a final GA release. At GA, the feature is available for everyone. Before GA, the only way to get the new functionality is to install a preview version. *Preview features* are different because they are installed with GA releases and must be optionally enabled.

From .NET 6 onward, Microsoft will include preview features in **general availability (GA)** releases. Developers can opt into these preview features and provide Microsoft with feedback. In a later GA release, they can be enabled for everyone.

#### Good Practice

Preview features are not supported in production code. Preview features are likely to have breaking changes before the final release. Enable preview features at your own risk.

### Requiring Preview Features

The [`RequiresPreviewFeatures`] attribute is used to indicate assemblies, types, or members that use and therefore require warnings about preview features. A code analyzer then scans for this assembly and generates warnings if needed. If your code does not use any preview features, you will not see any warnings. If you use any preview features, then your code should warn consumers of your code that you use preview features

### Enabling Preview Features

In the project file, you can add an elemnt to enable preview features and an element enable preview language features, see `EnablePreviewFeatures` and `LangVersion` below.

    <Project Sdk="Microsoft.NET.Sdk">
        <PropertyGroup>
            <OutputType>Exe</OutputType>
            <TargetFramework>net7.0</TargetFramework>
            <Nullable>enable</Nullable>
            <ImplicitUsings>enable</ImplicitUsings>
            <EnablePreviewFeatures>true</EnablePreviewFeatures>
            <LangVersion>preview</LangVersion>
        </PropertyGroup>
    </Project>
