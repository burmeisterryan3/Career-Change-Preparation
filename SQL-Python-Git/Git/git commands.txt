OVERVIEW:
________________________________________________________________

                       Remote Repository
                          (git push)
________________________________________________________________

                       Local Repository
                         (git commit)
________________________________________________________________
                    |                      |
                    |                      |
                    |                      |
                    |                      |
  Working Directory |    Staging Index     |        Trash
     (git diff)     |      (git add)       | (git reset --hard)
 (git reset --mixed)|  (git reset --soft)  |
                    |                      |
                    |                      | 

BRANCHES:
Local Branch: Which branch within your local repository you are on (e.g. main)
Tracking Branch: Which branch within your remote repository you are on (e.g. origin/main, upstream/main)

###############################################################################
#					Add, Commit, Revert					#
###############################################################################
# Move file from working directory to staging area
git add <filename>

# Move files from staging area to the repository
git commit
git commit -m <Message>

###############################################################################
#					Log, Show, and Diff					#
###############################################################################
# Display commit #, author, date, and commit message for each commit
git log

# Reduce info to bare essentials
git log --oneline

# View changes to files
git log -p <commit>
git log --path <commit>
git show <commit>

# View stats regarding changes in commit
git log --stat

# View stats and file changes
git log -p --stat <commit>
git show --stat <commit>

# View changes to uncommitted files
git diff <filename>

# View all branches with bullets and lines for branches
git log --oneline --graph --all

# View commit messages containing specific text
git log --grep="<text>"

# View commits by contributor
git shortlog

# Show number of commits by contributor in numerical order
git shortlog -s -n

# View commits by partiicular contributor
git log --author="<author-name>"

###############################################################################
#						Tag							#
###############################################################################
# Add annotated tag (includes author, date, and message)
# Without -a is a "lightweight" tag - not recommended
# If no commit is again, applied to most recent commit for current branch
git tag -a <name> <commit>

# Delete tag
git tag -d <name>

###############################################################################
#					Branch, Checkout						#
###############################################################################
# List all branches in repository
git branch

# Create branch
git branch <name>
git checkout -b <name>

# Switch branches
git checkout <name>

# Discard changes in the working directory
git checkout -- <file>

# Delete a branch
git branch -d <name>
git branch --delete <name>

# Force delete - when commits have not been merged and would be lost if deleted
git branch -D <name>

# Rename branch
git branch -m <old-name> <new-name>

###############################################################################
#						Merge							#
###############################################################################
# Merge branch into the currently checked out branch
# NOTE: the HEAD pointer indicates which branch will move during a merge
#   if HEAD points to main, git merge alt_branch will move main to alt_branch
git merge <other-branch>

# Conflicts
# 1. locate and remove all lines with merge conflict indicators
#	<<<<<<< HEAD
#		- everything below this line (until the next indicator) shows you
#		  what's on the current branch
#	||||||| merged common ancestors
#		- everything below this line (until the next indicator) shows you
#		  what the original lines were
#	=======
#		- everything below this line (until the next indicator) shows you
#		  what the original lines were
#	>>>>>>> heading-update
#		- is the ending indicator of what's on the branch that's being
#		  merged in (in this case, the heading-update branch)
# 2. determine what to keep
# 3. save the file(s)
# 4. stage the file(s)
# 5. make a commit

###############################################################################
#					Undoing Commits						#
###############################################################################
# Alter the most recent commit
git commit --amend

# To alter the commit's files, 1) edit file, 2) save file, 3) stage file, and
#     4) run "git commit --amend"
# To alter just the commit message, run "git commit --amend" on the directory
#     without any uncommitted changes

# Reverse previously made commit & create new commit
git commit <commit>

###### PRO TIP - Run "git branch backup" before executing reset

# Erase previous commit, move current commit changes to working directory
git reset --mixed <commit>
(To revert back to backup; run "git checkout -- <file>" & "git merge backup")

# Erase previous commit, move current commit commit to stanging index
git reset --soft <commit>

# Erase previous commit, permanently erase current commit changes
git reset --hard <commit>

###############################################################################
#						Remote						#
###############################################################################
# Manage a remote repository
git remote

# Add connection between your local repository and the remote repository
git remote add <remote-shortname> <url>
(e.g. git remote add origin https://www...)

# View full URL of remote repository
git remote -v

# Rename remote shortnames
git remote rename <old-shortname> <new-shortname>
(e.g. git remote rename <origin> <mine> OR
      git remote rename <upstream> <source-repo>)

# Sync remote repository with local repository (send changes)
git push <remote-shortname> <branch>
(e.g. git push origin main)

# Sync local repository with the remote repository (retrieve and merge changes)
git pull <remote-shortname> <branch>
(e.g. git pull origin main)

# Three things occur with git pull
# 1. The commits on the remote branch are copied to the local repository.
# 2. The remote tracking branch (origin/main) is moved to point to the most recent commit.
# 3. The remote tracking branch (origin/main) is merged into the local branch (main).

# Retrieve commits from remote repository but do not merge with local branch (retrive changes)
git fetch <remote-shortname> <branch>
(e.g. git fetch origin main)

# Two things occur with git fetch
# 1. The commits on the remote branch are copied to the local repository.
# 2. The remote tracking branch (origin/main) is moved to the most recent commit.
# NOTE: The local branch is not changed.
# Use if there are changes on both the local and remote branches neither of the other has.

RR - Remote Repository
LR - Local Repository
T - Tracking Branch
L - Local Branch

RR
a - 3 - d - f - e - 7 (main)
___________________________
LR
a - 3 - d - f - e (T: origin/main; L: main)

git commit
RR
a - 3 - d - f - e - 7 (main)
___________________________
LR
a - 3 - d - f - e - b (T: origin/main; L: main)


git fetch origin main
RR
a - 3 - d - f - e - 7 (main)
________________________________
LR
a - 3 - d - f- e - b (L: main)
                  \
                   7 (T: origin/main)

git merge origin/main
RR
a - 3 - d - f - e - 7 (main)
________________________________
LR
a - 3 - d - f- e - b - 4 (L: main)
                  \   /
                    7 (T: origin/main)

git push origin main
RR                7
		     /  \
a - 3 - d - f - e - b - 4 (main)
________________________________
LR
a - 3 - d - f- e - b - 4 (T: origin/main; L: main)
                  \   /
                    7

###############################################################################
#						Clone							#
###############################################################################
# Make a copy of a remote repository on the local device  
git clone <url>

###############################################################################
#						Rebase						#
###############################################################################
# Move commits to a new base (interactively)
git rebase -i HEAD~3
(NOTE: The -i is for interactive and is recommended while learning to rebase.)
###### PRO TIP - Run "git branch backup" before executing rebase to ensure there is a pointer to the branch that has been rebased.
###### PRO TIP - Do not rebase commits that have already been pushed... remote developers may be forced out of sync if so.

EXAMPLE:
 	                               HEAD
		  				   |
... - d2e454a - 8aa9efb - d968543 - ac5ce47

git rebase -i HEAD~3 will use commit HEAD~3
r 8aa9efb (reword this commit to reflect squashed commits as a part of it)
s d968543 (squash this commit into previous commit)
s ac5ce47 (squash this commit into previous commit)

... - d2e454a - 4a0328f